#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import struct
import base64
import string
import platform
import argparse
import pprint
from pyparsing import *

import otrapps.util
import otrapps
from otrapps.otr_private_key import OtrPrivateKeys
from otrapps.otr_fingerprints import OtrFingerprints
from otrapps.adium import AdiumProperties
from otrapps.gajim import GajimProperties
from otrapps.gibberbot import GibberbotProperties
from otrapps.jitsi import JitsiProperties
from otrapps.irssi import IrssiProperties
from otrapps.pidgin import PidginProperties
from otrapps.gpg import GPGProperties

# TODO merge duplicates in the final keys
# TODO convert protocol names to a standard format, i.e. prpl-jabber vs. libpurple-Jabber
# TODO use python-potr's convertkey.py to convert old libotr files

def testforfile(files):
    islibotr = False
    isotr4j = False

    isjitsi = False
    isgibberbot = False
    isirssi = False
    isadium = False
    ispidgin = False
    isgpg = False

    keys = dict()
    for file in files:
        appdir = os.path.dirname(file)
        print 'Checking ' + appdir + ':'

        if os.path.exists(os.path.join(appdir, 'otr_keystore')):
            isotr4j = True
            isgibberbot = True
        elif os.path.exists(os.path.join(appdir, 'sip-communicator.properties')) \
            and os.path.exists(os.path.join(appdir, 'contactlist.xml')):
            isotr4j = True
            isjitsi = True
        elif os.path.exists(os.path.join(appdir, 'otr.private_key')) \
            and os.path.exists(os.path.join(appdir, 'otr.fingerprints')):
            islibotr = True
            if os.path.exists(os.path.join(appdir, 'Accounts.plist')):
                isadium = True
            elif os.path.exists(os.path.join(appdir, 'accounts.xml')):
                ispidgin = True
        elif os.path.exists(os.path.join(appdir, 'otr.key')) \
            and os.path.exists(os.path.join(appdir, 'otr.fp')):
            islibotr = True
            isirssi = True
        elif os.path.exists(os.path.join(appdir, 'secring.gpg')) \
            and os.path.exists(os.path.join(appdir, 'pubring.gpg')):
            isgpg = True

        if isadium:
            print 'Reading Adium files: '
            tmp = AdiumProperties.parse(appdir)
        elif isirssi:
            print 'Reading irssi files: '
            tmp = OtrPrivateKeys.parse(os.path.join(appdir, 'otr.key'))
            keys += OtrFingerprints.parse(os.path.join(appdir, 'otr.fp'))
        elif islibotr:
            print 'Reading libotr files: '
            tmp = OtrPrivateKeys.parse(os.path.join(appdir, 'otr.private_key'))
            tmp += OtrFingerprints.parse(os.path.join(appdir, 'otr.fingerprints'))
        elif isgibberbot:
            print 'Reading Gibberbot otr4j format'
            tmp = GibberbotProperties.parse(os.path.join(appdir, 'otr_keystore'))
            pprint.pprint(tmp)
        elif isjitsi:
            print 'Reading Jitsi otr4j format'
        elif isgpg:
            print 'Reading GnuPG format'

        keys = tmp
            #for k,v in tmp.items():
            #keys[k] = v

    if keys:
        #pprint.pprint(keys)
        if not os.path.exists('output'):
            os.mkdir('output')
        GibberbotProperties.write(keys, 'output')
        OtrFingerprints.write(keys, os.path.join('output', 'otr.fingerprints'))
        OtrPrivateKeys.write(keys, os.path.join('output', 'otr.private_keys'))


def main(argv):

    # defaults
    if platform.system() == 'Darwin':
        default_input = ['adium']
    else:
        default_input = ['pidgin']

    default_output = ['gibberbot']


    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', action='append',
                        choices=otrapps.apps_supported, default=default_input,
                        help="specify which programs to take as input. if multiple then they'll be merged (default: %(default)s)")
    parser.add_argument('-o', '--output', action='append',
                        choices=otrapps.apps_supported, default=default_output,
                        help="specify which format to write out. if multiple then each will be written out (default: %(default)s)")
    # TODO add --input-folder option, it will conflict with '--input all'
    parser.add_argument('--output-folder', default=os.getcwd(),
                        help='the folder to write the output files to (defaults to current folder)')
    parser.add_argument('--no-qrcode', action='store_true', default=False,
                        help='do not print the Gibberbot QR Code to the terminal')
    parser.add_argument('-q', '--quiet', action='store_true', default=False,
                        help='do not print anything to the terminal')
    parser.add_argument('-t', '--test', help=argparse.SUPPRESS, default=None)
    parser.add_argument('--version', action='version', version='%(prog)s 0.1')
    args = parser.parse_args()

    # downcase all names to be a little more friendly
    args.input = [i.lower() for i in args.input]
    args.output = [o.lower() for o in args.output]

    keydict = dict()
    for app in args.input:
        print 'Reading %s files...' % ( app )
        # special case GB for now 'cause of this keyfile business
        if app == 'gibberbot':
            keyfile = os.path.join(args.output_folder, GibberbotProperties.keyfile)
            if os.path.exists(keyfile):
                otrapps.util.merge_keydicts(keydict, GibberbotProperties.parse(keyfile))
            else:
                print('Gibberbot WARNING: No usable "' + GibberbotProperties.keyfile +
                    '" file found, not reading keys from Gibberbot!')
            break

        properties = otrapps.apps[app]
        if args.test:
            # example: "tests/gajim/"
            settings_dir = os.path.join(args.test, app)
            otrapps.util.merge_keydicts(keydict, properties.parse(settings_dir))
        else:
            otrapps.util.merge_keydicts(keydict, properties.parse())

    if keydict:
        if not os.path.exists(args.output_folder):
            os.makedirs(args.output_folder)
        for app in args.output:
            # once again special case GB
            if 'gibberbot' in args.output:
                GibberbotProperties.write(keydict, args.output_folder)
                if not args.quiet:
                    print('\nenter this password into Gibberbot: ' + GibberbotProperties.password)
                    if not args.no_qrcode and sys.stdout.isatty():
                        print('or just scan this QR Code:')
                        import qrcode
                        qr = qrcode.QRCode()
                        qr.add_data(GibberbotProperties.password)
                        qr.print_tty()
                break

            properties = otrapps.apps[app]
            properties.write(keydict, args.output_folder)

if __name__ == "__main__":
    main(sys.argv[1:])
