#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import functools
import os
import qrcode
import sys
import tempfile
from Tkinter import *
# Mac OS X 10.6's python doesn't ship with ttk because its 2.6 not 2.7 :-(
if sys.platform != 'darwin':
    from ttk import *
from PIL import ImageTk, Image
import tkFileDialog
import tkMessageBox

import otrapps
from otrapps.chatsecure import ChatSecureProperties


def bind_close_window(toplevel, func):
    toplevel.bind('<KeyPress-Escape>', func)
    if sys.platform == 'darwin':
        toplevel.bind('<Mod1-Key-w>', func)
    else:
        toplevel.bind('<Control-Key-w>', func)


class MenuBar(Menu):

    def __init__(self, parent):
        Menu.__init__(self, parent)

        fileMenu = Menu(self, tearoff=False)
        self.add_cascade(label="File",underline=0, menu=fileMenu)
        fileMenu.add_command(label='Convert', underline=1, command=parent.convert)
        fileMenu.add_separator()
        fileMenu.add_command(label="Exit", underline=1, command=self.quit)

    def quit(self):
        sys.exit(0)


class App(Tk):

    def __init__(self):
        Tk.__init__(self)
        scriptdir = os.path.dirname(sys.argv[0])
        # installed path, should work on all platforms
        self.iconsdir = os.path.join(scriptdir, '..', 'share', 'keysync')
        if not os.path.isdir(self.iconsdir):
            # path when running in-place in the git repo
            self.iconsdir = os.path.join(scriptdir, 'icons')
        self.disableable = []
        menubar = MenuBar(self)
        self.config(menu=menubar)
        self.setupwindow(self)

    def setupwindow(self, master):
        self.fromframe = Frame(master)
        self.fromframe.pack(side=TOP, padx=5, pady=5)

        img = Image.open(os.path.join(self.iconsdir, 'add.png'))
        self.addimage = ImageTk.PhotoImage(img.resize((32, 32), Image.ANTIALIAS))
        self.addframe = Frame(self.fromframe)
        self.addframe.pack(side=RIGHT)
        self.addbutton = Button(self.addframe, text="add other...",
                                image=self.addimage, command=self.show_otherwindow)
        self.disableable.append(self.addbutton)
        # TODO add a command to the Button here, i.e.  command=self.dosomething
        self.addbutton.pack(side=TOP, padx=16)
        self.addlabel = Label(self.addframe, text='other...')
        self.addlabel.pack(side=BOTTOM, padx=16)

        # load all the app icons
        self.app_icons = dict()
        self.disabled_icons = dict()
        for app in otrapps.apps_supported:
            filename = os.path.join(self.iconsdir, app + '.png')
            img = Image.open(filename).resize((64, 64), Image.ANTIALIAS)
            self.app_icons[app] = ImageTk.PhotoImage(img)
            self.disabled_icons[app] = ImageTk.PhotoImage(img.convert('LA'))

        # store these to query if they are enabled/disabled
        self.app_buttons = dict()
        self.app_labels = dict()
        for app in self.detectfiles():
            frame = Frame(self.fromframe)
            frame.pack(side=RIGHT)
            button = Button(frame, text=app, image=self.app_icons[app],
                            command=functools.partial(self.toggle_app_button, app))
            button.pack(side=TOP)
            self.app_buttons[app] = button
            self.disableable.append(button)
            label = Label(frame, text=app.title())
            label.pack(side=BOTTOM)
            self.app_labels[app] = label

        self.bottomframe = Frame(master)
        self.bottomframe.pack(side=BOTTOM, expand=True, fill=X, anchor=S)

        self.toframe = LabelFrame(self.bottomframe, text='Write ChatSecure Keystore')
        self.toframe.pack(side=TOP, padx=5, pady=5, expand=True, fill=X)
        self.nosyncmessage = Text(self.toframe, bg='pink', borderwidth=0,
                                  insertborderwidth=0, height=4)
        self.nosyncmessage.insert('1.0', """KeySync cannot find your Android device.  Make sure it is plugged into this computer's USB and visible in your file browser!  Otherwise, you can write the otr_keystore.ofcaes file to the folder that you choose below.""")
        self.nosyncmessage.configure(state=DISABLED, wrap='word')
        self.nosyncmessage.pack(side=TOP, expand=True, fill=X, anchor=NW, padx=5, pady=5)
        self.tofolder = StringVar()
        self.tofolder.set(os.path.expanduser('~/Desktop'))
        self.filenameentry = Entry(self.toframe,
                                   textvariable=self.tofolder)
        self.filenameentry.pack(side=LEFT, expand=True, fill=X)
        self.disableable.append(self.filenameentry)
        self.choosebutton = Button(self.toframe, text='Choose...',
                                   command=self.choose_tofolder)
        self.choosebutton.pack(side=LEFT)
        self.disableable.append(self.choosebutton)

        self.button = Button(self.bottomframe, command=self.convert,
                             text="Write to ChatSecure otr_keystore.ofcaes file")
        self.button.pack(side=TOP, padx=5, pady=5)
        self.disableable.append(self.button)

    def show_error(self, error_msg):
        print(error_msg)
        tkMessageBox.showwarning("KeySync error", error_msg)
        return

    def toggle_app_button(self, app):
        button = self.app_buttons[app]
        label = self.app_labels[app]
        if str(label.cget('state')) == 'normal':
            button.configure(image=self.disabled_icons[app])
            label.configure(state=DISABLED)
        else:
            button.configure(image=self.app_icons[app])
            label.configure(state=NORMAL)

    def set_app_enabled_state(self, enable):
        if enable:
            for widget in self.disableable:
                widget.configure(state=NORMAL)
        else:
            for widget in self.disableable:
                widget.configure(state=DISABLED)

    def choose_tofolder(self):
        dirname = tkFileDialog.askdirectory(initialdir=self.tofolder.get(),
                                            title='Please select a directory')
        if len(dirname) > 0:
            self.tofolder.set(dirname)

    def choose_fromfolder(self):
        dirname = tkFileDialog.askdirectory(initialdir=self.fromfolder.get(),
                                            title='Please select a directory')
        if len(dirname) > 0:
            self.fromfolder.set(dirname)

    def show_otherwindow(self):
        self.otherwindow = Toplevel(self)
        bind_close_window(self.otherwindow, self.destroy_otherwindow)
        self.otherwindow.title('Choose an OTR app to read from')
        self.otherwindow.transient(root)
        self.otherwindow.resizable(False, False)
        self.otherwindow.minsize(400, 150)

        optionslist = sorted(otrapps.apps_supported)
        self.fromframe = Frame(self.otherwindow)
        self.fromframe.pack(side=TOP, fill=X, padx=5, pady=5)

        self.fromfolder = StringVar()
        self.fromfolder.set(self.getpath(optionslist[0]))
        self.fromentry = Entry(self.fromframe, textvariable=self.fromfolder)
        self.fromentry.pack(side=LEFT, expand=True, fill=X)
        self.fromchoosebutton = Button(self.fromframe, text='Choose...',
                                       command=self.choose_fromfolder)
        self.fromchoosebutton.pack(side=LEFT)

        self.appframe = Frame(self.otherwindow, borderwidth='3')
        self.appframe.pack(side=TOP, fill=X, padx=5, pady=5)
        self.fromapp = StringVar(root)
        self.fromapp.set(optionslist[0]) # initial value
        self.option = OptionMenu(self.appframe, self.fromapp, *optionslist,
                                 command=self.select_app)
        self.option.configure(width=20)
        self.option.pack(side=LEFT)
        self.applabel = Label(self.appframe, image=self.app_icons[self.fromapp.get()])
        self.applabel.pack(side=RIGHT, anchor=W)

        self.buttonframe = Frame(self.otherwindow)
        self.buttonframe.pack(side=BOTTOM, anchor=SE, padx=5, pady=5)
        self.cancelbutton = Button(self.buttonframe, text='Cancel',
                                   command=self.otherwindow.destroy)
        self.cancelbutton.pack(side=LEFT)
        self.okbutton = Button(self.buttonframe, text='OK', state=DISABLED)
        self.okbutton.pack(side=LEFT)

    def destroy_otherwindow(self, event=None):
        if self.otherwindow:
            self.otherwindow.destroy()

    def select_app(self, app=None):
        self.applabel.configure(image=self.app_icons[self.fromapp.get()])

    def getpath(self, app):
        '''output the standard path of a given app'''
        try:
            return otrapps.apps[app].path
        except KeyError:
            print("Invalid app: %s" % ( app ))
            return None

    def detectfiles(self):
        '''detect which apps are installed based on the existence of OTR files'''
        haveapps = []
        for app in otrapps.apps:
            if os.path.exists(otrapps.apps[app].path):
                haveapps.append(app)
        return haveapps

    def show_qrwindow(self):
        qr = qrcode.QRCode(border=4)
        qr.add_data(ChatSecureProperties.password)
        qr.make(fit=True)
        img = qr.make_image()

        self.qrwindow = Toplevel(self)
        self.qrwindow.transient(root)
        self.qrwindow.resizable(False, False)
        self.qrwindow.bind('<Destroy>', self.after_qrwindow_destroy)
        bind_close_window(self.qrwindow, self.destroy_qrwindow)
        # place QR window right above KeySync main window
        x = self.winfo_x()
        y = self.winfo_y()
        self.qrwindow.geometry('+%d+%d' % (x, y))

        self.qrframe = Frame(self.qrwindow)
        self.qrframe.pack(side = "top", fill = "both", expand = "yes")
        pwtxt = ('Enter this password into ChatSecure: \n'
                 + ChatSecureProperties.password
                 + '\nor just scan this QRCode with ChatSecure:')
        self.pwlabel = Label(self.qrframe, text=pwtxt)
        self.pwlabel.pack(side = "top", fill = "both", expand = "yes")
        self.tkimg = ImageTk.PhotoImage(img)
        self.qrlabel = Label(self.qrframe, image=self.tkimg)
        self.qrlabel.pack(side = "bottom", fill = "both", expand = "yes")

    def destroy_qrwindow(self, event=None):
        if self.qrwindow:
            self.qrwindow.destroy()

    def after_qrwindow_destroy(self, event=None):
        self.set_app_enabled_state(True)

    def convert(self):
        '''run the conversion from one file set to another'''
        self.set_app_enabled_state(False)
        keydict = dict()
        for app in self.app_labels.keys():
            if str(self.app_labels[app].cget('state')) == 'disabled':
                continue
            print('Parsing ', app)
            try:
                properties = otrapps.apps[app]
                otrapps.util.merge_keydicts(keydict, properties.parse())
            except KeyError:
                print("Invalid app: %s" % ( app ))
                self.show_error("Invalid app: %s" % ( app ))
                return None
        if len(keydict.keys()) > 0:
            otrapps.make_outdir(self.tofolder.get(), '')
            ChatSecureProperties.write(keydict, self.tofolder.get())
            self.show_qrwindow()


#------------------------------------------------------------------------------#
# main

root = App()
windowingsystem = root.tk.call('tk', 'windowingsystem')

root.title('KeySync')
root.minsize(450, 300)
root.mainloop()
